trigger:
  branches:
    include:
      - monitor

# schedules:
#   - cron: "0 7 * * *"
#     displayName: Daily Monitor
#     branches:
#       include:
#         - monitor
#     always: true

pool:
  vmImage: ubuntu-latest

parameters:
  - name: environment
    type: string
    default: 'uat'
    values:
     - uat
     - prod

variables:
  - name: monitorImageName
    value: 'aa-monitorlambda'
  - name: repositoryName
    value: ${{ format('{0}-ecr', parameters.environment) }}

steps:
- task: DockerInstaller@0
  displayName: 'Install Docker'

- task: Docker@2
  displayName: 'Build Monitor Lambda Image'
  inputs:
    command: build
    repository: $(monitorImageName)
    Dockerfile: 'modules/lambda/MonitorLambda/Dockerfile'
    tags: |
      $(Build.BuildId)
    arguments: |
      --build-arg S3_BUCKET=aabackstop-${{ parameters.environment }}

- task: ECRPushImage@1
  displayName: 'Push Monitor Lambda to ECR'
  inputs:
    awsCredentials: ${{ format('AWS-ECR-{0}', parameters.environment) }}
    regionName: 'eu-west-1'
    imageSource: 'imagename'
    sourceImageName: $(monitorImageName)
    sourceImageTag: $(Build.BuildId)
    repositoryName: $(repositoryName)
    pushTag: |
      monitorlambda

- script: |
    echo "üîç Debugging AWS credentials..."
    echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
    echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:0:4}********"
  displayName: 'Debug AWS Credentials'
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)


- script: |
    echo "üîç Running daily sync validation inside Docker..."
    docker run --rm \
      -e AWS_ACCESS_KEY_ID \
      -e AWS_SECRET_ACCESS_KEY \
      -e ENVIRONMENT \
      -e S3_BUCKET \
      -e MODE \
      -v $(System.DefaultWorkingDirectory)/modules/lambda/MonitorLambda:/var/task \
      aa-monitorlambda:$(Build.BuildId)
  displayName: 'Run Daily Monitor Script in Docker'
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    ENVIRONMENT: ${{ parameters.environment }}
    S3_BUCKET: aabackstop-${{ parameters.environment }}
    MODE: daily


- task: PublishBuildArtifacts@1
  displayName: 'Publish Sync Log Artifact'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: 'modules/lambda/MonitorLambda/sync_log.txt'
    ArtifactName: 'SyncLog'
    publishLocation: 'Container'


