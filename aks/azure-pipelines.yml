trigger:
  branches:
    include:
      - qa
      - prod

variables:
  azureSubscription: 'azure-aahelp-service-connection'  # <-- use your actual service connection name
  resourceGroupName: 'azne-rg-roanon-t-aahelp'
  aksClusterName: 'azne-aks-qa-t-aahelp-1'
  aksNamespace: 'default'
  templateFile: 'infra/main.bicep'
  parametersFile: 'infra/parameters/qa.parameters.json'

stages:
- stage: Deploy
  displayName: "Deploy AKS and Wildcard Cert"
  jobs:
  - job: DeployAKS
    displayName: "Deploy AKS Cluster and TLS Secret"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    # Step 1: Download wildcard cert securely
    - task: DownloadSecureFile@1
      name: downloadCert
      displayName: "Download wildcard.cert from Secure Files"
      inputs:
        secureFile: 'wildcard.cert'

    # Step 2: Deploy AKS cluster from Bicep
    - task: AzureCLI@2
      displayName: "Deploy AKS Cluster via Bicep"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Deploying AKS cluster $(aksClusterName)..."
          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file $(templateFile) \
            --parameters @$(parametersFile)
      continueOnError: false

    # Step 3: Wait a few seconds to ensure resources are registered
    - script: sleep 30
      displayName: "Wait for AKS creation propagation"

    # Step 4: Get AKS credentials
    - task: AzureCLI@2
      displayName: "Get AKS Credentials"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Fetching AKS credentials for $AKSCLUSTERNAME..."
          az aks get-credentials \
            --resource-group "$RESOURCEGROUPNAME" \
            --name "$AKSCLUSTERNAME" \
            --overwrite-existing
      env:
        RESOURCEGROUPNAME: $(resourceGroupName)
        AKSCLUSTERNAME: $(aksClusterName)

    # Step 5: Create wildcard-tls secret from cert
    - task: AzureCLI@2
      displayName: "Create Kubernetes TLS Secret (wildcard.cert)"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Creating wildcard TLS secret in AKS..."
          kubectl create secret generic wildcard-tls \
            --from-file=tls.crt="$(downloadCert.secureFilePath)" \
            -n "$AKSNAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
          echo "âœ… Secret 'wildcard-tls' created in namespace $AKSNAMESPACE"
      env:
        AKSNAMESPACE: $(aksNamespace)

    # Step 6: Verify AKS secret creation
    - task: AzureCLI@2
      displayName: "Verify wildcard-tls Secret"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Verifying wildcard-tls secret..."
          kubectl get secret wildcard-tls -n "$AKSNAMESPACE" -o yaml
      env:
        AKSNAMESPACE: $(aksNamespace)
