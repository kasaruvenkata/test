trigger:
  branches:
    include:
      - qa
      - prod

variables:
  azureSubscription: 'akscluster_roadops'
  resourceGroupName: 'azne-rg-roanon-t-aahelp'
  templateFile: 'aks/main.bicep'
  parametersFile: 'aks/parameters/qa.parameters.json'


stages:
- stage: Deploy
  displayName: "Deploy AKS and TLS Cert"
  jobs:
  - job: DeployAKS
    displayName: "AKS Deployment with Wildcard Cert"
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Deploying AKS cluster using Bicep..."
          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file $(templateFile) \
            --parameters @$(parametersFile)

    # Step 4: Get AKS Credentials
    - task: AzureCLI@2
      displayName: "Get AKS Credentials"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Fetching AKS credentials..."
          echo "Resource Group: $RESOURCEGROUPNAME"
          echo "Cluster Name: $AKSCLUSTERNAME"

          az aks get-credentials \
            --resource-group "$RESOURCEGROUPNAME" \
            --name "$AKSCLUSTERNAME" \
            --overwrite-existing
      env:
        RESOURCEGROUPNAME: $(resourceGroupName)
        AKSCLUSTERNAME: $(aksClusterName)

    # Step 5: Create Kubernetes TLS Secret using wildcard.cert
    - task: AzureCLI@2
      displayName: "Create Kubernetes TLS Secret (wildcard.cert)"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Creating Kubernetes TLS secret..."
          
          # check cert file exists
          ls -l "$(downloadCert.secureFilePath)"

          kubectl create secret generic wildcard-tls \
            --from-file=tls.crt="$(downloadCert.secureFilePath)" \
            -n $(aksNamespace) --dry-run=client -o yaml | kubectl apply -f -

          echo " TLS secret 'wildcard-tls' successfully created in namespace $(aksNamespace)"

    # Step 6: Verify secret exists
    - task: AzureCLI@2
      displayName: "Verify Kubernetes TLS Secret"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Verifying secret..."
          kubectl get secret wildcard-tls -n $(aksNamespace)
